{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_Not_Owner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "funderToValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAggregatorV3",
      "outputs": [
        {
          "internalType": "contract MockV3Aggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x93694d2a8f158885cc3e1a958537ef9671166d8facaa4ab8ecfd1f0c524fcae4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "998364",
    "logsBloom": "0x
    "blockHash": "0xda03e887dc7fcf77cc53291396c7f54a08c59d685713bcca31201cfb4fb48d8a",
    "transactionHash": "0x93694d2a8f158885cc3e1a958537ef9671166d8facaa4ab8ecfd1f0c524fcae4",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "998364",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "87aeb198ffafd4b88ff0601a6483f030",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_Not_Owner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funderToValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorV3\",\"outputs\":[{\"internalType\":\"contract MockV3Aggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x2450923d9bc223f53bcbbd50a17405929ce5322200e8ce053c7918030cbb7844\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorInterface} from \\\"./AggregatorInterface.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./AggregatorV3Interface.sol\\\";\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xd5e222c5dd223490b766da8e45266101dd3635b1ba31d9b7a3a80d49f7640f85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../shared/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @title MockV3Aggregator\\n * @notice Based on the FluxAggregator contract\\n * @notice Use this contract when you need to test\\n * other contract's ability to read data from an\\n * aggregator contract, but how the aggregator got\\n * its answer is unimportant\\n */\\ncontract MockV3Aggregator is AggregatorV2V3Interface {\\n  uint256 public constant override version = 0;\\n\\n  uint8 public override decimals;\\n  int256 public override latestAnswer;\\n  uint256 public override latestTimestamp;\\n  uint256 public override latestRound;\\n\\n  mapping(uint256 => int256) public override getAnswer;\\n  mapping(uint256 => uint256) public override getTimestamp;\\n  mapping(uint256 => uint256) private getStartedAt;\\n\\n  constructor(uint8 _decimals, int256 _initialAnswer) {\\n    decimals = _decimals;\\n    updateAnswer(_initialAnswer);\\n  }\\n\\n  function updateAnswer(int256 _answer) public {\\n    latestAnswer = _answer;\\n    latestTimestamp = block.timestamp;\\n    latestRound++;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = block.timestamp;\\n    getStartedAt[latestRound] = block.timestamp;\\n  }\\n\\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\\n    latestRound = _roundId;\\n    latestAnswer = _answer;\\n    latestTimestamp = _timestamp;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = _timestamp;\\n    getStartedAt[latestRound] = _startedAt;\\n  }\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\\n  }\\n\\n  function latestRoundData()\\n    external\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return (\\n      uint80(latestRound),\\n      getAnswer[latestRound],\\n      getStartedAt[latestRound],\\n      getTimestamp[latestRound],\\n      uint80(latestRound)\\n    );\\n  }\\n\\n  function description() external pure override returns (string memory) {\\n    return \\\"v0.8/tests/MockV3Aggregator.sol\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x774819d0045441fafc088add82707e22cda02ddca6c01bf049e19183ca3ed20f\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"./NumberUtils.sol\\\";\\n\\n\\n    error FundMe_Not_Owner();\\n\\ncontract FundMe {\\n\\n    using NumberUtils for uint256;\\n\\n    MockV3Aggregator private aggregatorV3;\\n\\n    uint256 private MINIMUM_VALUE = 5*10**18;\\n\\n    address[] public funders;\\n    address public immutable i_owner;\\n    mapping(address => uint256) public funderToValue;\\n\\n    constructor(address _address){\\n        i_owner = msg.sender;\\n        aggregatorV3 = MockV3Aggregator(_address);\\n    }\\n\\n    function getFunders() public view returns (address[] memory) {\\n        return funders;\\n    }\\n\\n\\n    /*\\u7ed9\\u5408\\u7ea6\\u8f6c\\u8d26*/\\n    function fund() public payable {\\n        uint256 value = msg.value.convertAmount(aggregatorV3);\\n        require(value > MINIMUM_VALUE, \\\"Don't enough to send\\\");\\n\\n        funders.push(msg.sender);\\n        funderToValue[msg.sender] = value;\\n    }\\n\\n    function getAggregatorV3() public view returns(MockV3Aggregator) {\\n        return aggregatorV3;\\n    }\\n\\n    function withdraw() public checkFunder {\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            funderToValue[funders[i]] = 0;\\n        }\\n        funders = new address[](0);\\n        (bool isSuccess,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n\\n        require(isSuccess, \\\"withdraw fail\\\");\\n    }\\n\\n    /*\\n     * @Desc: receive \\u51fd\\u6570\\u8868\\u793a\\u8f6c\\u8d26\\u51fd\\u6570\\uff0c\\u5982\\u679c\\u5165\\u53c2\\u4f1a\\u6267\\u884c\\u8be5\\u51fd\\u6570\\uff0c\\u5c31\\u5f53\\u6267\\u884c\\u5982\\uff1amsg.sender.transfer,send\\uff0c\\u5982\\u679c\\u6709\\u5165\\u53c2\\u5c31\\u6267\\u884cfallback\\uff0c\\u6ca1\\u6709\\u6267\\u884creceive\\n    */\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /*\\n     * @Desc: receive \\u51fd\\u6570\\u8868\\u793a\\u8f6c\\u8d26\\u51fd\\u6570\\uff0c\\u5982\\u679c\\u5165\\u53c2\\u4f1a\\u6267\\u884c\\u8be5\\u51fd\\u6570\\uff0c\\u5c31\\u5f53\\u6267\\u884c\\u5982\\uff1amsg.sender.transfer,send\\uff0c\\u5982\\u679c\\u6709\\u5165\\u53c2\\u5c31\\u6267\\u884cfallback\\uff0c\\u6ca1\\u6709\\u6267\\u884creceive\\n    */\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    modifier checkFunder(){\\n        if (!(msg.sender == i_owner)) {\\n            revert FundMe_Not_Owner();\\n        }\\n        _;\\n    }\\n}\",\"keccak256\":\"0x56e6c53fccea6383906fa8eb6aa76efc52e98799abd73bd6460769743dc51ac8\",\"license\":\"UNLICENSED\"},\"contracts/NumberUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {MockV3Aggregator} from \\\"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\\\";\\nlibrary NumberUtils {\\n\\n    /*\\u8fd9\\u91cc\\u7684\\u5355\\u4f4d\\u662fusd/eth*/\\n    function getPrice(MockV3Aggregator aggregatorV3) internal view returns (uint256)  {\\n        /*\\u83b7\\u53d6\\u6700\\u8fd1\\u7684\\u4ef7\\u683c*/\\n        (, int256 price,,,) = aggregatorV3.latestRoundData();\\n        /*\\u83b7\\u53d6\\u5355\\u4ef7*/\\n        uint256 unit = uint256(aggregatorV3.decimals());\\n\\n        return uint256(price) * unit ** 10;\\n    }\\n\\n    /*_ethCount,\\u8fd9\\u91cc\\u662fwei\\uff0c\\u6240\\u4ee5\\u8981\\u96641e18*/\\n    function convertAmount(uint256 _ethCount,MockV3Aggregator aggregatorV3) internal view returns (uint256)  {\\n        uint256 price = getPrice(aggregatorV3);\\n        return _ethCount * price / 1e18;\\n    }\\n\\n//    function getVersion() internal returns (uint256){\\n//        AggregatorV3Interface aggregatorV3 = AggregatorV3Interface(0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43);\\n//        return aggregatorV3.version();\\n//    }\\n\\n}\",\"keccak256\":\"0x5c04f65fe72bb837361ce13c0fa7be14b8e0e594ba3febafef903226e62de08f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052674563918244f400006001553480156200001d57600080fd5b50604051620011bf380380620011bf833981810160405281019062000043919062000128565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f082620000c3565b9050919050565b6200010281620000e3565b81146200010e57600080fd5b50565b6000815190506200012281620000f7565b92915050565b600060208284031215620001415762000140620000be565b5b6000620001518482850162000111565b91505092915050565b6080516110426200017d600039600081816102d0015261052e01526110426000f3fe6080604052600436106100745760003560e01c8063dba6335f1161004e578063dba6335f146100d9578063dc0d3dff14610104578063e03352a514610141578063ea63a0441461017e57610083565b80633ccfd60b1461008d578063adae64e5146100a4578063b60d4288146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102ce565b005b3480156100b057600080fd5b506100b9610503565b6040516100c691906108a0565b60405180910390f35b6100d76101a9565b005b3480156100e557600080fd5b506100ee61052c565b6040516100fb91906108dc565b60405180910390f35b34801561011057600080fd5b5061012b60048036038101906101269190610932565b610550565b60405161013891906108dc565b60405180910390f35b34801561014d57600080fd5b506101686004803603810190610163919061098b565b61058f565b60405161017591906109c7565b60405180910390f35b34801561018a57600080fd5b506101936105a7565b6040516101a09190610aa0565b60405180910390f35b60006101de60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461063590919063ffffffff16565b90506001548111610224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021b90610b1f565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610353576040517f9745b97900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6002805490508110156103f3576000600360006002848154811061037d5761037c610b3f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050610356565b50600067ffffffffffffffff81111561040f5761040e610b6e565b5b60405190808252806020026020018201604052801561043d5781602001602082028036833780820191505090505b506002908051906020019061045392919061077a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161047a90610bce565b60006040518083038185875af1925050503d80600081146104b7576040519150601f19603f3d011682016040523d82523d6000602084013e6104bc565b606091505b5050905080610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790610c2f565b60405180910390fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002818154811061056057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b6060600280548060200260200160405190810160405280929190818152602001828054801561062b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105e1575b5050505050905090565b6000806106418361066b565b9050670de0b6b3a764000081856106589190610c7e565b6106629190610cef565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dd9190610dad565b50505091505060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107549190610e61565b60ff169050600a816107669190610fc1565b826107719190610c7e565b92505050919050565b8280548282559060005260206000209081019282156107f3579160200282015b828111156107f25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061079a565b5b5090506108009190610804565b5090565b5b8082111561081d576000816000905550600101610805565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061086661086161085c84610821565b610841565b610821565b9050919050565b60006108788261084b565b9050919050565b600061088a8261086d565b9050919050565b61089a8161087f565b82525050565b60006020820190506108b56000830184610891565b92915050565b60006108c682610821565b9050919050565b6108d6816108bb565b82525050565b60006020820190506108f160008301846108cd565b92915050565b600080fd5b6000819050919050565b61090f816108fc565b811461091a57600080fd5b50565b60008135905061092c81610906565b92915050565b600060208284031215610948576109476108f7565b5b60006109568482850161091d565b91505092915050565b610968816108bb565b811461097357600080fd5b50565b6000813590506109858161095f565b92915050565b6000602082840312156109a1576109a06108f7565b5b60006109af84828501610976565b91505092915050565b6109c1816108fc565b82525050565b60006020820190506109dc60008301846109b8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610a17816108bb565b82525050565b6000610a298383610a0e565b60208301905092915050565b6000602082019050919050565b6000610a4d826109e2565b610a5781856109ed565b9350610a62836109fe565b8060005b83811015610a93578151610a7a8882610a1d565b9750610a8583610a35565b925050600181019050610a66565b5085935050505092915050565b60006020820190508181036000830152610aba8184610a42565b905092915050565b600082825260208201905092915050565b7f446f6e277420656e6f75676820746f2073656e64000000000000000000000000600082015250565b6000610b09601483610ac2565b9150610b1482610ad3565b602082019050919050565b60006020820190508181036000830152610b3881610afc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610bb8600083610b9d565b9150610bc382610ba8565b600082019050919050565b6000610bd982610bab565b9150819050919050565b7f7769746864726177206661696c00000000000000000000000000000000000000600082015250565b6000610c19600d83610ac2565b9150610c2482610be3565b602082019050919050565b60006020820190508181036000830152610c4881610c0c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c89826108fc565b9150610c94836108fc565b9250828202610ca2816108fc565b91508282048414831517610cb957610cb8610c4f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cfa826108fc565b9150610d05836108fc565b925082610d1557610d14610cc0565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d3f81610d20565b8114610d4a57600080fd5b50565b600081519050610d5c81610d36565b92915050565b6000819050919050565b610d7581610d62565b8114610d8057600080fd5b50565b600081519050610d9281610d6c565b92915050565b600081519050610da781610906565b92915050565b600080600080600060a08688031215610dc957610dc86108f7565b5b6000610dd788828901610d4d565b9550506020610de888828901610d83565b9450506040610df988828901610d98565b9350506060610e0a88828901610d98565b9250506080610e1b88828901610d4d565b9150509295509295909350565b600060ff82169050919050565b610e3e81610e28565b8114610e4957600080fd5b50565b600081519050610e5b81610e35565b92915050565b600060208284031215610e7757610e766108f7565b5b6000610e8584828501610e4c565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115610ee557808604811115610ec157610ec0610c4f565b5b6001851615610ed05780820291505b8081029050610ede85610e8e565b9450610ea5565b94509492505050565b600082610efe5760019050610fba565b81610f0c5760009050610fba565b8160018114610f225760028114610f2c57610f5b565b6001915050610fba565b60ff841115610f3e57610f3d610c4f565b5b8360020a915084821115610f5557610f54610c4f565b5b50610fba565b5060208310610133831016604e8410600b8410161715610f905782820a905083811115610f8b57610f8a610c4f565b5b610fba565b610f9d8484846001610e9b565b92509050818404811115610fb457610fb3610c4f565b5b81810290505b9392505050565b6000610fcc826108fc565b9150610fd783610e28565b92506110047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610eee565b90509291505056fea264697066735822122092c0dfaa67b02b7482a2caab3b21ef8bb65f42c0596d5ea371a7b072a7c8327064736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 321,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "aggregatorV3",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(MockV3Aggregator)310"
      },
      {
        "astId": 328,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "MINIMUM_VALUE",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 331,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 337,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funderToValue",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(MockV3Aggregator)310": {
        "encoding": "inplace",
        "label": "contract MockV3Aggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}