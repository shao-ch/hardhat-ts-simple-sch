{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../shared/interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"./NumberUtils.sol\";\n\n\n    error FundMe_Not_Owner();\n\ncontract FundMe {\n\n    using NumberUtils for uint256;\n\n    MockV3Aggregator private aggregatorV3;\n\n    uint256 private MINIMUM_VALUE = 5*10**18;\n\n    address[] public funders;\n    address public immutable i_owner;\n    mapping(address => uint256) public funderToValue;\n\n    constructor(address _address){\n        i_owner = msg.sender;\n        aggregatorV3 = MockV3Aggregator(_address);\n    }\n\n    function getFunders() public view returns (address[] memory) {\n        return funders;\n    }\n\n\n    /*给合约转账*/\n    function fund() public payable {\n        uint256 value = msg.value.convertAmount(aggregatorV3);\n        require(value > MINIMUM_VALUE, \"Don't enough to send\");\n\n        funders.push(msg.sender);\n        funderToValue[msg.sender] = value;\n    }\n\n    function getAggregatorV3() public view returns(MockV3Aggregator) {\n        return aggregatorV3;\n    }\n\n    function withdraw() public checkFunder {\n        for (uint256 i = 0; i < funders.length; i++) {\n            funderToValue[funders[i]] = 0;\n        }\n        funders = new address[](0);\n        (bool isSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n\n        require(isSuccess, \"withdraw fail\");\n    }\n\n    /*\n     * @Desc: receive 函数表示转账函数，如果入参会执行该函数，就当执行如：msg.sender.transfer,send，如果有入参就执行fallback，没有执行receive\n    */\n    fallback() external payable {\n        fund();\n    }\n\n    /*\n     * @Desc: receive 函数表示转账函数，如果入参会执行该函数，就当执行如：msg.sender.transfer,send，如果有入参就执行fallback，没有执行receive\n    */\n    receive() external payable {\n        fund();\n    }\n\n    modifier checkFunder(){\n        if (!(msg.sender == i_owner)) {\n            revert FundMe_Not_Owner();\n        }\n        _;\n    }\n}"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/NumberUtils.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {MockV3Aggregator} from \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\nlibrary NumberUtils {\n\n    /*这里的单位是usd/eth*/\n    function getPrice(MockV3Aggregator aggregatorV3) internal view returns (uint256)  {\n        /*获取最近的价格*/\n        (, int256 price,,,) = aggregatorV3.latestRoundData();\n        /*获取单价*/\n        uint256 unit = uint256(aggregatorV3.decimals());\n\n        return uint256(price) * unit ** 10;\n    }\n\n    /*_ethCount,这里是wei，所以要除1e18*/\n    function convertAmount(uint256 _ethCount,MockV3Aggregator aggregatorV3) internal view returns (uint256)  {\n        uint256 price = getPrice(aggregatorV3);\n        return _ethCount * price / 1e18;\n    }\n\n//    function getVersion() internal returns (uint256){\n//        AggregatorV3Interface aggregatorV3 = AggregatorV3Interface(0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43);\n//        return aggregatorV3.version();\n//    }\n\n}"
    },
    "contracts/test/MockV3Aggregator.sol": {
      "content": "\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}